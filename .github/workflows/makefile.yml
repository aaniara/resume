name: Makefile CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write  # Needed for creating releases

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up TeXLive
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          texlive-base \
          texlive-latex-recommended \
          texlive-latex-extra \
          texlive-fonts-recommended \
          texlive-fonts-extra \
          texlive-xetex \
          texlive-bibtex-extra \
          texlive-luatex \
          texlive-science \
          latexmk

    - name: Prepare build environment
      run: mkdir -p output

    - name: Build LaTeX documents
      run: make

    - name: Clean auxiliary files
      run: make clean_aux

    - name: Upload PDFs
      uses: actions/upload-artifact@v4
      with:
        name: output-pdfs
        path: output/*.pdf

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch the full history
        fetch-tags: true  # Ensure tags are fetched

    - name: Download PDFs
      uses: actions/download-artifact@v4
      with:
        name: output-pdfs
        path: output

    - name: Fetch Latest Release Tag
      id: latest_release
      run: |
        # Get the latest release tag
        LATEST_RELEASE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
        
        echo "Latest release tag: $LATEST_RELEASE"
        echo "latest_release=$LATEST_RELEASE" >> $GITHUB_ENV

    - name: Fetch Commit Deltas
      id: fetch_commits
      run: |
        if [ -z "${{ env.latest_release }}" ] || [ "${{ env.latest_release }}" = "null" ]; then
          # If no release exists, include all commits
          COMMITS=$(git log --oneline HEAD)
        else
          # Get commits since the last release
          COMMITS=$(git log --oneline "${{ env.latest_release }}..HEAD")
        fi

        echo "Commit Deltas:"
        echo "$COMMITS"

        # Append the commit deltas to the environment using heredoc
        {
          echo "commit_deltas<<EOF"
          echo "$COMMITS"
          echo "EOF"
        } >> $GITHUB_ENV

    - name: Generate Release Notes
      id: generate_notes
      run: |
        echo "### Release Notes" > release_notes.txt
        echo "The following changes are included in this release:" >> release_notes.txt

        # Format commit deltas as bullet points
        echo "${{ env.commit_deltas }}" | sed 's/^/- /' >> release_notes.txt

        # Append the release notes into GITHUB_ENV correctly
        {
          echo "notes<<EOF"
          cat release_notes.txt
          echo "EOF"
        } >> $GITHUB_ENV


    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: output/*.pdf
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.run_number }}
        name: Release ${{ github.run_number }}
        body: ${{ env.notes }}
